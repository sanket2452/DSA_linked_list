/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        vector<int> v;
        ListNode* temp=head;
        while(temp!=NULL){
            v.push_back(temp->val);
            temp=temp->next;
        }
        swap(v[k-1], v[v.size()-k]);
        int i=0;
        temp=head;
        while(temp!=NULL){
            temp->val=v[i++];
            temp=temp->next;
        }
        return head;
    }
};

___________________________________________________________________________________________________________________________________________________________________

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        if(head==NULL) return NULL;
        if(head->next==NULL) return head;
        ListNode* first;
        // ListNode* sec;
        int i=1;
        ListNode* curr=head;
        ListNode* prev=head;
        ListNode* fwd=head;
       while(curr!=NULL){
           if(i<k){
               prev=prev->next;
           }
           if(i>k){
               fwd=fwd->next;
           }
           curr=curr->next;
           i++;
       }
       int tmp=prev->val;
       prev->val=fwd->val;
       fwd->val=tmp;
       return head;
    }
};
